Acerca de crear una clase Product y añadir una lista de Products en la clase Order.

La propuesta del ejercicio hace una cosa muy parecida. La clase ProductEnum funciona como una clase Product.  
En el enunciado se sobreentiende que vamos a vender pizzas, burritos, hamburguesas y kebbabs como una constante, sin diferenciar si es una pizza margarita o una hamburguesa doble. 
Cada producto tendrá siempre el mismo precio y el mismo regalo, por eso la clase Enum.

La lista de Products propuesta en las mejoras equivale a : private List<String> productNames;. 

Los nombres de los productos se recuperan como: ProductEnum.BURRITO.getName(); o el precio con ProductEnum.BURRITO.getPrice().
La clase Enum te ahorra código porqué no tienes que instanciar una clase Product y crear los productos.

La clase Product y la lista de Products sería la solución correcta si no trabajaramos con constantes,
teniendo diferentes pizzas, hamburguesas ...

Acerca de integrar la clase DeliveryPersonEnum en DeliveryPerson.

Lo podría hacer añadiendo ocho constantes a la clase DeliveryPerson y ahí modificar los valores 
si fuera necesario. Utilizo una clase Enum porqué me parece más claro aunque tenga dos clases en 
vez de una. Cada DeliveryPerson tiene un transporte fijo asignado que corresponde a un porcentaje en el precio final de Order. Si el transporte fuese aleatorio a cada repartidor antes de hacer el reparto, hacer una sola clase tendría más sentido.

Cambiar bucles for por expresiones Lambda.

Cambios en el package delivery.handlers. Clase OrderManager.

Método findCustomer(int customerId). Línea 95.

Método findOrder(int orderId). Línea 208.

Método checkIfPendingOrders(). Línea 244.

Método checkIfDeliveredOrders(). Línea 261.
